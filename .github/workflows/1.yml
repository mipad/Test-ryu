name: Android CI - Apple Silicon Optimized

on:
  push:
    branches: [ "1" ]
  pull_request:
    branches: [ "1" ]

jobs:
  build:
    runs-on: macos-latest  # M1/M2 芯片自动使用 arm64 架构
    timeout-minutes: 35
    
    env:
      JAVA_OPTS: "-Xmx6g -XX:MaxMetaspaceSize=2g"
      GRADLE_OPTS: "-Dorg.gradle.workers.max=4"
      PROJECT_DIR: src/RyujinxAndroid
      ANDROID_API: 33
      NDK_VERSION: 25.2.9519653

    steps:
    # ========== 1. 环境检测 ==========
    - name: Detect Architecture
      id: arch
      run: |
        ARCH=$(uname -m)
        echo "检测到芯片架构: $ARCH"
        echo "TOOLCHAIN_SUFFIX=$([ "$ARCH" == "arm64" ] && echo "darwin-aarch64" || echo "darwin-x86_64")" >> $GITHUB_ENV

    # ========== 2. 代码检出 ==========  
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        path: Test-ryu

    # ========== 3. 环境配置 ==========
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: 17
        architecture: arm64  # 显式指定 ARM 架构

    - name: Install Android NDK
      uses: android-actions/setup-android-ndk@v1
      with:
        ndk-version: ${{ env.NDK_VERSION }}
        add-to-path: true

    # ========== 4. OpenSSL 交叉编译 ==========
    - name: Build OpenSSL (ARM64 Optimized)
      env:
        TOOLCHAIN_PATH: ${{ github.workspace }}/android-ndk/toolchains/llvm/prebuilt/${{ env.TOOLCHAIN_SUFFIX }}
      run: |
        # 配置 ARM64 专用编译参数
        export CC=$TOOLCHAIN_PATH/bin/aarch64-linux-android$ANDROID_API-clang
        export AR=$TOOLCHAIN_PATH/bin/llvm-ar
        export RANLIB=$TOOLCHAIN_PATH/bin/llvm-ranlib

        # 编译 OpenSSL
        cd ${{ runner.temp }}
        git clone --depth 1 --branch openssl-3.2.1 https://github.com/openssl/openssl.git
        cd openssl
        
        ./Configure android-arm64 \
          -D__ANDROID_API__=$ANDROID_API \
          no-shared \
          no-tests \
          --prefix=/opt/openssl-arm64
        
        make -j$(sysctl -n hw.logicalcpu)
        sudo make install

    # ========== 5. 构建配置 ==========
    - name: Setup Gradle
      working-directory: ${{ github.workspace }}/Test-ryu/${{ env.PROJECT_DIR }}
      run: |
        chmod +x gradlew
        ./gradlew --version

    # ========== 6. 主构建任务 ==========
    - name: Build APK
      working-directory: ${{ github.workspace }}/Test-ryu/${{ env.PROJECT_DIR }}
      env:
        LLVM_PATH: ${{ github.workspace }}/android-ndk/toolchains/llvm/prebuilt/${{ env.TOOLCHAIN_SUFFIX }}
        OPENSSL_ROOT: /opt/openssl-arm64
      run: |
        ./gradlew clean assembleRelease \
          -DllvmToolchainPath=$LLVM_PATH \
          -Popenssl.root=$OPENSSL_ROOT \
          -Pandroid.overridePathCheck=true \
          --no-daemon \
          --stacktrace \
          --scan

    # ========== 7. 产物处理 ==========  
    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: android-arm64-release
        path: ${{ github.workspace }}/Test-ryu/${{ env.PROJECT_DIR }}/app/build/outputs/apk/release/*.apk
