name: Android CI Fix

on:
  push:
    branches: [ "1" ]
  pull_request:
    branches: [ "1" ]

jobs:
  build:
    runs-on: macos-latest
    timeout-minutes: 45
    
    env:
      JAVA_OPTS: "-Xmx6g -XX:MaxMetaspaceSize=2g"
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=4"
      PROJECT_DIR: src/RyujinxAndroid
      ANDROID_NDK_VERSION: "26.3.11579264"
      NDK_INSTALL_PATH: "/Volumes/AndroidNDK" 
      ANDROID_API_LEVEL: "33"

    steps:
    # ========== 1. 代码检出 ==========
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        repository: mipad/Test-ryu
        ref: 1
        path: Test-ryu

    # ========== 2. 环境配置 ==========
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: 17
        architecture: arm64

    - name: Download and Mount NDK DMG
      shell: bash
      run: |
       NDK_DMG_URL="https://dl.google.com/android/repository/android-ndk-r26d-darwin.dmg"
       curl -L -o ndk.dmg "$NDK_DMG_URL"
    
       # 挂载DMG并列出内容
       hdiutil attach ndk.dmg -mountpoint "$NDK_INSTALL_PATH" -nobrowse
       echo "=== DMG内容列表 ==="
       ls -l "$NDK_INSTALL_PATH"  # 关键：此处显示真实路径结构 

    # ========== 4. 安装NDK至Android SDK目录 ==========
    - name: Install NDK from DMG
      run: |
        # 创建目标目录
        TARGET_NDK_DIR="$ANDROID_HOME/ndk/${{ env.ANDROID_NDK_VERSION }}"
        mkdir -p "$TARGET_NDK_DIR"
        
        # 复制文件（DMG内通常包含一个AndroidNDK.app包）
        cp -R "$NDK_INSTALL_PATH/AndroidNDK.app/Contents/NDK"/* "$TARGET_NDK_DIR"
        
        # 卸载DMG
        hdiutil detach "$NDK_INSTALL_PATH"
        rm ndk.dmg
        
        echo "NDK已安装至: $TARGET_NDK_DIR"

    # ========== 5. 严格架构验证 ==========
    - name: Validate NDK Architecture
      run: |
        NDK_BIN_DIR="$ANDROID_HOME/ndk/${{ env.ANDROID_NDK_VERSION }}/toolchains/llvm/prebuilt/darwin-arm64/bin"
        
        # 检查目录是否存在
        if [ ! -d "$NDK_BIN_DIR" ]; then
          echo "❌ 错误: 未找到ARM64工具链目录，NDK可能为x86_64版本！"
          exit 1
        fi
        
        # 检查关键二进制文件架构
        check_arch() {
          file "$1" | grep -q "arm64" && echo "✅ $1 是ARM64版本" || (echo "❌ $1 架构错误！"; exit 1)
        }
        
        check_arch "$NDK_BIN_DIR/clang"
        check_arch "$NDK_BIN_DIR/lld"
        check_arch "$NDK_BIN_DIR/ndk-stack"

    # ========== 6. 配置LLVM路径 ==========
    - name: Set LLVM Path
      run: |
        LLVM_PATH="$ANDROID_HOME/ndk/${{ env.ANDROID_NDK_VERSION }}/toolchains/llvm/prebuilt/darwin-arm64"
        echo "LLVM_PATH=$LLVM_PATH" >> $GITHUB_ENV
        echo "::notice::LLVM工具链路径已设置为: $LLVM_PATH"
        
    # ========== 4. 查找LLVM工具链 ==========
    - name: Find LLVM Toolchain Path
      id: find-llvm
      shell: bash
      run: |
        # 调整路径优先级，优先检测ARM64
        NDK_BASE="$ANDROID_HOME/ndk/${{ env.ANDROID_NDK_VERSION }}/toolchains/llvm/prebuilt"
        POSSIBLE_PATHS=(
          "$NDK_BASE/darwin-aarch64"  # Apple Silicon优先
          "$NDK_BASE/darwin-x86_64"    # Intel兼容
          "$NDK_BASE/linux-x86_64"     # Linux
        )

        # 循环检查路径
        for path in "${POSSIBLE_PATHS[@]}"; do
          if [ -d "$path/bin" ] && [ -f "$path/bin/clang" ]; then
            echo "✅ 找到有效LLVM路径: $path"
            echo "LLVM_PATH=$path" >> $GITHUB_ENV
            # 额外验证架构
            if [[ "$path" == *"aarch64"* ]]; then
              echo "::notice::已选择ARM64原生工具链"
            else
              echo "::warning::使用非ARM64工具链，可能影响性能！"
            fi
            exit 0
          fi
        done

        echo "❌ 错误: 未找到有效的LLVM工具链！"
        exit 1

    # ========== 4. 验证 lld 存在性 ==========
    - name: Check lld
      shell: bash
      run: |
        echo "最终 LLVM_PATH: $LLVM_PATH"
        echo "检查 lld 是否存在:"
        ls -l $LLVM_PATH/bin/lld* || echo "❌ lld 未找到！"
        echo "检查 Clang 版本:"
        $LLVM_PATH/bin/clang --version
        
    
    
    # ========== 4. 主构建流程 ==========
    - name: Build APK
      working-directory: ${{ github.workspace }}/Test-ryu/${{ env.PROJECT_DIR }}
      env:
        OPENSSL_ROOT_DIR: /opt/openssl-arm64
      run: |
        # 修复文件权限
        chmod +x gradlew
        find . -name "*.sh" -exec chmod +x {} \;

        # 执行构建
        ./gradlew clean assembleRelease \
          -DllvmToolchainPath=$LLVM_PATH \
          -Dopenssl.root=$OPENSSL_ROOT_DIR \
          -Pandroid.overridePathCheck=true \
          --no-daemon \
          --stacktrace \
          --scan

    # ========== 5. 产物处理 ==========
    - name: Upload APK Artifact
      uses: actions/upload-artifact@v4
      with:
        name: android-arm64-release
        path: ${{ github.workspace }}/Test-ryu/${{ env.PROJECT_DIR }}/app/build/outputs/apk/release/*.apk
