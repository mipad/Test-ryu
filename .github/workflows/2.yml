name: Android CI Fix

on:
  push:
    branches: [ "1" ]
  pull_request:
    branches: [ "1" ]

jobs:
  build:
    runs-on: macos-latest
    timeout-minutes: 45
    
    env:
      JAVA_OPTS: "-Xmx6g -XX:MaxMetaspaceSize=2g"
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=4"
      PROJECT_DIR: src/RyujinxAndroid
      ANDROID_NDK_VERSION: "26.3.11579264"
      ANDROID_API_LEVEL: "33"

    steps:
    # ========== 1. 代码检出 ==========
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        repository: mipad/Test-ryu
        ref: 1
        path: Test-ryu

    # ========== 2. 环境配置 ==========
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: 17
        architecture: arm64

    - name: Setup Android SDK/NDK
      uses: android-actions/setup-android@v3
      with:
         ndk-version: ${{ env.ANDROID_NDK_VERSION }}
         cmake-version: 3.22.1

    - name: Verify NDK Architecture
      shell: bash
      run: |
        echo "=== 检查NDK安装路径 ==="
        NDK_INSTALLED_PATH="$ANDROID_HOME/ndk/${{ env.ANDROID_NDK_VERSION }}"
        echo "NDK路径: $NDK_INSTALLED_PATH"
        
        # 检查是否为ARM64版本
        if [ -d "$NDK_INSTALLED_PATH/toolchains/llvm/prebuilt/darwin-aarch64" ]; then
          echo "✅ 检测到ARM64 NDK (darwin-aarch64)"
        elif [ -d "$NDK_INSTALLED_PATH/toolchains/llvm/prebuilt/darwin-x86_64" ]; then
          echo "⚠️ 警告: 检测到x86_64 NDK，可能与Apple Silicon不兼容！"
          # 可在此处添加强制失败逻辑（如需严格检查）
          # exit 1
        else
          echo "❌ 错误: 无法识别NDK架构！"
          exit 1
        fi

        # 检查关键二进制文件架构
        echo "=== 检查关键工具链文件 ==="
        check_arch() {
          file "$1" | grep -q "arm64" && echo "✅ $1 是ARM64版本" || (echo "❌ $1 架构不匹配！"; exit 1)
        }

        CLANG_PATH="$NDK_INSTALLED_PATH/toolchains/llvm/prebuilt/darwin-*/bin/clang"
        check_arch $CLANG_PATH
        check_arch "${CLANG_PATH%/*}/lld"

    # ========== 4. 查找LLVM工具链 ==========
    - name: Find LLVM Toolchain Path
      id: find-llvm
      shell: bash
      run: |
        # 调整路径优先级，优先检测ARM64
        NDK_BASE="$ANDROID_HOME/ndk/${{ env.ANDROID_NDK_VERSION }}/toolchains/llvm/prebuilt"
        POSSIBLE_PATHS=(
          "$NDK_BASE/darwin-aarch64"  # Apple Silicon优先
          "$NDK_BASE/darwin-x86_64"    # Intel兼容
          "$NDK_BASE/linux-x86_64"     # Linux
        )

        # 循环检查路径
        for path in "${POSSIBLE_PATHS[@]}"; do
          if [ -d "$path/bin" ] && [ -f "$path/bin/clang" ]; then
            echo "✅ 找到有效LLVM路径: $path"
            echo "LLVM_PATH=$path" >> $GITHUB_ENV
            # 额外验证架构
            if [[ "$path" == *"aarch64"* ]]; then
              echo "::notice::已选择ARM64原生工具链"
            else
              echo "::warning::使用非ARM64工具链，可能影响性能！"
            fi
            exit 0
          fi
        done

        echo "❌ 错误: 未找到有效的LLVM工具链！"
        exit 1

    # ========== 4. 验证 lld 存在性 ==========
    - name: Check lld
      shell: bash
      run: |
        echo "最终 LLVM_PATH: $LLVM_PATH"
        echo "检查 lld 是否存在:"
        ls -l $LLVM_PATH/bin/lld* || echo "❌ lld 未找到！"
        echo "检查 Clang 版本:"
        $LLVM_PATH/bin/clang --version
        
    
    
    # ========== 4. 主构建流程 ==========
    - name: Build APK
      working-directory: ${{ github.workspace }}/Test-ryu/${{ env.PROJECT_DIR }}
      env:
        OPENSSL_ROOT_DIR: /opt/openssl-arm64
      run: |
        # 修复文件权限
        chmod +x gradlew
        find . -name "*.sh" -exec chmod +x {} \;

        # 执行构建
        ./gradlew clean assembleRelease \
          -DllvmToolchainPath=$LLVM_PATH \
          -Dopenssl.root=$OPENSSL_ROOT_DIR \
          -Pandroid.overridePathCheck=true \
          --no-daemon \
          --stacktrace \
          --scan

    # ========== 5. 产物处理 ==========
    - name: Upload APK Artifact
      uses: actions/upload-artifact@v4
      with:
        name: android-arm64-release
        path: ${{ github.workspace }}/Test-ryu/${{ env.PROJECT_DIR }}/app/build/outputs/apk/release/*.apk
