name: Android CI Fix

on:
  push:
    branches: [ "1" ]
  pull_request:
    branches: [ "1" ]

jobs:
  build:
    runs-on: macos-latest
    timeout-minutes: 45
    
    env:
      JAVA_OPTS: "-Xmx6g -XX:MaxMetaspaceSize=2g"
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=4"
      PROJECT_DIR: src/RyujinxAndroid
      ANDROID_NDK_VERSION: "26.3.11579264"
      ANDROID_API_LEVEL: "33"

    steps:
    # ========== 1. 代码检出 ==========
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        repository: mipad/Test-ryu
        ref: 1
        path: Test-ryu

    # ========== 2. 环境配置 ==========
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: 17
        architecture: arm64

    - name: Setup Android SDK/NDK
      uses: android-actions/setup-android@v3
      with:
         ndk-version: ${{ env.ANDROID_NDK_VERSION }}
         cmake-version: 3.22.1

    - name: Check NDK Architecture
      run: |
        echo "验证 NDK 是否为 ARM64 版本:"
        file $LLVM_PATH/bin/clang
        # 期望输出: Mach-O 64-bit executable arm64
        
    - name: Find LLVM Toolchain Path
      id: find-llvm
      shell: bash
      run: |
        # 定义可能的路径模式
        NDK_BASE="$ANDROID_HOME/ndk/${{ env.ANDROID_NDK_VERSION }}/toolchains/llvm/prebuilt"
        POSSIBLE_PATHS=(
          "$NDK_BASE/darwin-x86_64"   # Intel Mac
          "$NDK_BASE/darwin-aarch64"  # Apple Silicon Mac
          "$NDK_BASE/linux-x86_64"    # Linux
        )

        # 遍历检查路径是否存在
        for path in "${POSSIBLE_PATHS[@]}"; do
          if [ -d "$path/bin" ] && [ -f "$path/bin/clang" ]; then
            echo "✅ Found valid LLVM path: $path"
            echo "LLVM_PATH=$path" >> $GITHUB_ENV
            exit 0
          fi
        done

        echo "❌ No valid LLVM toolchain found in paths:"
        printf "  %s\n" "${POSSIBLE_PATHS[@]}"
        exit 1

    # ========== 4. 验证 lld 存在性 ==========
    - name: Check lld
      shell: bash
      run: |
        echo "最终 LLVM_PATH: $LLVM_PATH"
        echo "检查 lld 是否存在:"
        ls -l $LLVM_PATH/bin/lld* || echo "❌ lld 未找到！"
        echo "检查 Clang 版本:"
        $LLVM_PATH/bin/clang --version
        
    
    
    # ========== 4. 主构建流程 ==========
    - name: Build APK
      working-directory: ${{ github.workspace }}/Test-ryu/${{ env.PROJECT_DIR }}
      env:
        OPENSSL_ROOT_DIR: /opt/openssl-arm64
      run: |
        # 修复文件权限
        chmod +x gradlew
        find . -name "*.sh" -exec chmod +x {} \;

        # 执行构建
        ./gradlew clean assembleRelease \
          -DllvmToolchainPath=$LLVM_PATH \
          -Dopenssl.root=$OPENSSL_ROOT_DIR \
          -Pandroid.overridePathCheck=true \
          --no-daemon \
          --stacktrace \
          --scan

    # ========== 5. 产物处理 ==========
    - name: Upload APK Artifact
      uses: actions/upload-artifact@v4
      with:
        name: android-arm64-release
        path: ${{ github.workspace }}/Test-ryu/${{ env.PROJECT_DIR }}/app/build/outputs/apk/release/*.apk
