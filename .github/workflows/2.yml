name: Android CI Fix

on:
  push:
    branches: [ "2" ]
  pull_request:
    branches: [ "2" ]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    env:
      JAVA_OPTS: "-Xmx6g -XX:MaxMetaspaceSize=2g"
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=4"
      PROJECT_DIR: src/RyujinxAndroid
      ANDROID_NDK_VERSION: "28.1.13356709"  # 有效版本号
      NDK_DOWNLOAD_URL: "https://dl.google.com/android/repository/android-ndk-r28b-linux.zip"
      ANDROID_HOME: /usr/local/lib/android/sdk  # 默认 SDK 路径
      DOTNET_VERSION: "9.0.203"
      ANDROID_API_LEVEL: "35"

    steps:
    # ========== 1. 代码检出 ==========
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        repository: mipad/Test-ryu
        ref: 2
        path: Test-ryu

    # ========== 2. 环境配置 ==========
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: 17
        architecture: x64

    - name: Install NDK
      run: |
        NDK_DIR="$ANDROID_HOME/ndk/${{ env.ANDROID_NDK_VERSION }}"
        # 清空旧目录
        sudo rm -rf $NDK_DIR
        sudo mkdir -p $NDK_DIR
        wget -q ${{ env.NDK_DOWNLOAD_URL }} -O ndk.zip
        sudo unzip -q ndk.zip -d $NDK_DIR
        sudo rm ndk.zip

        # 处理嵌套目录
        if [ -d "$NDK_DIR/android-ndk-r28b" ]; then
          sudo mv $NDK_DIR/android-ndk-r28b/* $NDK_DIR
          sudo rm -r $NDK_DIR/android-ndk-r28b
        fi

    - name: Verify NDK Installation
      run: |
        EXPECTED_NDK_VERSION="28.1.13356709"
        NDK_PATH="$ANDROID_HOME/ndk/$EXPECTED_NDK_VERSION"
        
        # 检查目录存在性
        if [ ! -d "$NDK_PATH" ]; then
          echo "::error::NDK 目录不存在: $NDK_PATH"
          exit 1
        fi

        # 检查版本文件
        VERSION_FILE="$NDK_PATH/source.properties"
        if [ ! -f "$VERSION_FILE" ]; then
          echo "::error::NDK 版本文件缺失: $VERSION_FILE"
          exit 1
        fi

        # 提取实际版本号
        ACTUAL_NDK_VERSION=$(grep "Pkg.Revision" "$VERSION_FILE" | cut -d'=' -f2 | tr -d ' ')
        echo "预期 NDK 版本: $EXPECTED_NDK_VERSION"
        echo "实际 NDK 版本: $ACTUAL_NDK_VERSION"

        # 验证版本一致性
        if [ "$ACTUAL_NDK_VERSION" != "$EXPECTED_NDK_VERSION" ]; then
          echo "::error::NDK 版本不匹配 (预期: $EXPECTED_NDK_VERSION, 实际: $ACTUAL_NDK_VERSION)"
          exit 1
        fi

        # 检查工具链文件
        CLANG_PATH="$NDK_PATH/toolchains/llvm/prebuilt/linux-x86_64/bin/clang"
        if [ ! -f "$CLANG_PATH" ]; then
          echo "::error::LLVM 工具链文件缺失: $CLANG_PATH"
          exit 1
        fi

        echo "NDK 验证通过"
        
    - name: Setup Android SDK/NDK
      uses: android-actions/setup-android@v3
      with:
        ndk-version: ${{ env.ANDROID_NDK_VERSION }}
        cmake-version: "3.22.1"
        # 显式安装 NDK 和必要工具
        sdkmanager-packages: |
          cmdline-tools;latest
          platform-tools
          ndk;${{ env.ANDROID_NDK_VERSION }}  # 强制安装指定版本 NDK
        
    - name: Accept Android Licenses
      run: |
        yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses
        
    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    # ========== 3. 验证环境 ==========
    - name: Verify .NET SDK Installation
      run: |
        dotnet --list-sdks
        echo "检查是否安装 .NET ${{ env.DOTNET_VERSION }}"

# ========== 3. 验证环境 ==========
    - name: Verify NDK Version
      run: |
        # 定义预期版本和实际路径
        EXPECTED_NDK_VERSION="${{ env.ANDROID_NDK_VERSION }}"
        NDK_PATH="$ANDROID_HOME/ndk/$EXPECTED_NDK_VERSION"

        # 检查 NDK 目录是否存在
        if [ ! -d "$NDK_PATH" ]; then
          echo "::error::NDK 目录不存在: $NDK_PATH"
          exit 1
        fi

        # 读取 NDK 版本文件 (source.properties)
        VERSION_FILE="$NDK_PATH/source.properties"
        if [ ! -f "$VERSION_FILE" ]; then
          echo "::error::NDK 版本文件缺失: $VERSION_FILE"
          exit 1
        fi

        # 提取实际版本号
        ACTUAL_NDK_VERSION=$(grep "Pkg.Revision" "$VERSION_FILE" | cut -d'=' -f2 | tr -d ' ')
        echo "预期 NDK 版本: $EXPECTED_NDK_VERSION"
        echo "实际 NDK 版本: $ACTUAL_NDK_VERSION"

        # 验证版本一致性
        if [ "$ACTUAL_NDK_VERSION" != "$EXPECTED_NDK_VERSION" ]; then
          echo "::error::NDK 版本不匹配 (预期: $EXPECTED_NDK_VERSION, 实际: $ACTUAL_NDK_VERSION)"
          exit 1
        fi

        # 验证工具链文件是否存在
        CLANG_PATH="$NDK_PATH/toolchains/llvm/prebuilt/linux-x86_64/bin/clang"
        if [ ! -f "$CLANG_PATH" ]; then
          echo "::error::LLVM 工具链文件缺失: $CLANG_PATH"
          exit 1
        fi
        
    - name: Install NDK Platform Libraries
      run: |
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "platforms;android-${{ env.ANDROID_API_LEVEL }}"

    - name: Configure Environment Paths
      shell: bash
      run: |
        # 显式定义 ANDROID_NDK_HOME，避免路径拼接错误
        ANDROID_NDK_HOME="/usr/local/lib/android/sdk/ndk/${{ env.ANDROID_NDK_VERSION }}"
        LLVM_PATH="$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64"
        LIB_DIR="$LLVM_PATH/sysroot/usr/lib/aarch64-linux-android/${{ env.ANDROID_API_LEVEL }}"

        echo "ANDROID_NDK_HOME=$ANDROID_NDK_HOME" >> $GITHUB_ENV
        echo "LLVM_PATH=$LLVM_PATH" >> $GITHUB_ENV
        echo "LIB_DIR=$LIB_DIR" >> $GITHUB_ENV
        echo "$LLVM_PATH/bin" >> $GITHUB_PATH

        # 调试输出：验证路径是否存在
        echo "检查 NDK 路径:"
        ls -l $ANDROID_NDK_HOME
        echo "检查 LLVM 工具链:"
        ls -l $LLVM_PATH/bin/clang
        
    # ========== 4. 主构建流程 ==========
    - name: Build APK
      working-directory: ${{ github.workspace }}/Test-ryu/${{ env.PROJECT_DIR }}
      env:
        OPENSSL_ROOT_DIR: /opt/openssl-x64
      run: |
        # 修复文件权限
        chmod +x gradlew
        find . -name "*.sh" -exec chmod +x {} \;

        # 调试输出：关键环境变量
        echo "LLVM_PATH: $LLVM_PATH"
        echo "OPENSSL_ROOT_DIR: $OPENSSL_ROOT_DIR"

        # 执行构建
        ./gradlew clean assembleRelease \
          -DllvmToolchainPath=$LLVM_PATH \
          -Dopenssl.root=$OPENSSL_ROOT_DIR \
          -Pandroid.overridePathCheck=true \
          --no-daemon \
          --stacktrace

    - name: Find Native Libraries (.so)
      working-directory: ${{ github.workspace }}/Test-ryu/${{ env.PROJECT_DIR }}
      run: |
       echo "========== 开始搜索 .so 文件 =========="
       find app/build -name "*.so" -print
       echo "========== 搜索完成 =========="

    - name: Upload Native Libraries
      uses: actions/upload-artifact@v4
      with:
       name: native-libs
       path: ${{ github.workspace }}/Test-ryu/${{ env.PROJECT_DIR }}/app/build/**/*.so
       
    # ========== 5. 产物处理 ==========
    - name: Upload APK Artifact
      uses: actions/upload-artifact@v4
      with:
        name: android-arm64-release
        path: ${{ github.workspace }}/Test-ryu/${{ env.PROJECT_DIR }}/app/build/outputs/apk/release/*.apk
