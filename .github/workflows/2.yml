name: Android CI Fix

on:
  push:
    branches: [ "10" ]
  pull_request:
    branches: [ "10" ]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    env:
      JAVA_OPTS: "-Xmx6g -XX:MaxMetaspaceSize=2g"
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=4"
      PROJECT_DIR: src/RyujinxAndroid
      ANDROID_NDK_VERSION: "25.2.9519653"  # 修正版本号
      DOTNET_VERSION: "9.0.203"
      ANDROID_API_LEVEL: "35"

    steps:
    # ========== 1. 代码检出 ==========
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        repository: mipad/Test-ryu
        ref: 10
        path: Test-ryu

    # ========== 2. 环境配置 ==========
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: 17
        architecture: x64

    - name: Setup Android SDK/NDK
      uses: android-actions/setup-android@v3
      with:
        ndk-version: ${{ env.ANDROID_NDK_VERSION }}
        cmake-version: 3.22.1

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    # ========== 3. 验证环境 ==========
    - name: Verify .NET SDK Installation
      run: |
        dotnet --list-sdks
        echo "检查是否安装 .NET ${{ env.DOTNET_VERSION }}"

    - name: Install NDK Platform Libraries
      run: |
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "platforms;android-${{ env.ANDROID_API_LEVEL }}"

    - name: Configure Environment Paths
      shell: bash
      run: |
        # 动态生成路径
        ANDROID_NDK_HOME="$ANDROID_HOME/ndk/$ANDROID_NDK_VERSION"
        LLVM_PATH="$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64"
        LIB_DIR="$LLVM_PATH/sysroot/usr/lib/aarch64-linux-android/$ANDROID_API_LEVEL"

        # 路径验证
        if [ ! -d "$ANDROID_NDK_HOME" ]; then
          echo "❌ 错误：NDK路径不存在 ($ANDROID_NDK_HOME)"
          echo "已安装的NDK版本:"
          ls -l $ANDROID_HOME/ndk/
          exit 1
        fi

        if [ ! -f "$LLVM_PATH/bin/clang" ]; then
          echo "❌ 错误：Clang编译器未找到"
          exit 1
        fi

        echo "ANDROID_NDK_HOME=$ANDROID_NDK_HOME" >> $GITHUB_ENV
        echo "LLVM_PATH=$LLVM_PATH" >> $GITHUB_ENV
        echo "LIB_DIR=$LIB_DIR" >> $GITHUB_ENV
        echo "$LLVM_PATH/bin" >> $GITHUB_PATH

    - name: Install Ninja Build
      run: sudo apt-get install -y ninja-build

    # ========== 4. 主构建流程 ==========
    - name: Build APK
      working-directory: ${{ github.workspace }}/Test-ryu/${{ env.PROJECT_DIR }}
      env:
        OPENSSL_ROOT_DIR: /opt/openssl-x64
      run: |
        chmod +x gradlew
        find . -name "*.sh" -exec chmod +x {} \;

        echo "LLVM_PATH: $LLVM_PATH"
        echo "OPENSSL_ROOT_DIR: $OPENSSL_ROOT_DIR"

        ./gradlew clean assembleRelease \
          -DllvmToolchainPath=$LLVM_PATH \
          -Dopenssl.root=$OPENSSL_ROOT_DIR \
          -Pandroid.overridePathCheck=true \
          --no-daemon \
          --stacktrace

    # ========== 5. 产物处理 ==========
    - name: Find Native Libraries (.so)
      working-directory: ${{ github.workspace }}/Test-ryu/${{ env.PROJECT_DIR }}
      run: |
        echo "========== 开始搜索 .so 文件 =========="
        find app/build -name "*.so" -print
        echo "========== 搜索完成 =========="

    - name: Upload Native Libraries
      uses: actions/upload-artifact@v4
      with:
        name: native-libs
        path: ${{ github.workspace }}/Test-ryu/${{ env.PROJECT_DIR }}/app/build/**/*.so
       
    - name: Upload APK Artifact
      uses: actions/upload-artifact@v4
      with:
        name: android-arm64-release
        path: ${{ github.workspace }}/Test-ryu/${{ env.PROJECT_DIR }}/app/build/outputs/apk/release/*.apk
