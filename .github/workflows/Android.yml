name: Android CI 

on:
  push:
    branches: [ "1" ]
  pull_request:
    branches: [ "1" ]
  workflow_dispatch:
    inputs:
      should_release:
        description: 'Create GitHub Release'
        type: boolean
        default: false
      upload_artifact:
        description: 'Upload APK as artifact'
        type: boolean
        default: true

jobs:
  build:
    runs-on: macos-latest
    env:
      ANDROID_NDK_HOME: ${{ github.workspace }}/Test-ryu/android-sdk/ndk/25.1.8937393
      TARGET_ARCH: aarch64-linux-android21  # 根据你的目标架构调整
    permissions:
      contents: read
      actions: write
      packages: write

    steps:
      # ----------------------------------------
      # 1. 代码检出
      # ----------------------------------------
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: mipad/Test-ryu
          ref: 1
          path: Test-ryu

      # ----------------------------------------
      # 2. Java 环境配置
      # ----------------------------------------
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      # ----------------------------------------
      # 3. Android SDK 组件安装
      # ----------------------------------------
      - name: Install Android SDK Components
        run: |
          # 安装指定版本的 NDK 和 CMake
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "cmake;3.22.1" "ndk;25.1.8937393"
          # 接受所有 Android 许可证
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses

      # ----------------------------------------
      # 4. NDK 路径配置
      # ----------------------------------------
      - name: Configure NDK Path
        run: |
          # 写入 NDK 路径到 local.properties
          echo "ndk.dir=$ANDROID_NDK_HOME" >> Test-ryu/src/RyujinxAndroid/local.properties
          # 验证 NDK 工具链存在
          ls -l $ANDROID_NDK_HOME/toolchains/llvm/prebuilt/darwin-x86_64/bin/clang
          ls -l $ANDROID_NDK_HOME/toolchains/llvm/prebuilt/darwin-x86_64/sysroot/usr/lib/$TARGET_ARCH

      # ----------------------------------------
      # 5. LLVM 工具链配置
      # ----------------------------------------
      - name: Setup LLVM Toolchain
        run: |
          # 安装 Homebrew LLVM（用于本地 macOS 工具）
          brew install llvm lld
          # 将 NDK 的 LLVM 工具链添加到 PATH 最前方
          echo "$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/darwin-x86_64/bin" >> $GITHUB_PATH
          # 设置编译器和链接器标志
          echo "CC=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/darwin-x86_64/bin/clang" >> $GITHUB_ENV
          echo "CXX=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/darwin-x86_64/bin/clang++" >> $GITHUB_ENV
          echo "LDFLAGS=-L$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/darwin-x86_64/sysroot/usr/lib/$TARGET_ARCH -llog -ldl -lz -lm -lc" >> $GITHUB_ENV
          echo "CPPFLAGS=-I$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/darwin-x86_64/sysroot/usr/include" >> $GITHUB_ENV

      # ----------------------------------------
      # 6. 构建项目
      # ----------------------------------------
      - name: Build Android
        run: |
          cd Test-ryu/src/RyujinxAndroid
          chmod +x ./gradlew
          # 添加详细日志参数
          ./gradlew clean assembleRelease --stacktrace --info \
              -Pandroid.ndkPath="$ANDROID_NDK_HOME" \
              -Pandroid.extraLdFlags="-Wl,--sysroot=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/darwin-x86_64/sysroot"

      # ----------------------------------------
      # 7. 上传产物
      # ----------------------------------------
      - name: Upload APK
        if: ${{ inputs.upload_artifact }}
        uses: actions/upload-artifact@v4
        with:
          name: ryujinx-build-${{ github.run_number }}
          path: Test-ryu/src/RyujinxAndroid/app/build/outputs/apk/release/*.apk
          retention-days: 7
