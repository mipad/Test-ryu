name: Android CI

on:
  push:
    branches: [ "1" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest  # 使用 Apple Silicon 运行器
    env:
      NDK_VERSION: "25.1.8937393"           # 指定 NDK 版本
      NDK_DIR: "${{ github.workspace }}/Test-ryu/android-sdk/ndk/${{ env.NDK_VERSION }}"
      NDK_TOOLCHAIN: "${{ env.NDK_DIR }}/toolchains/llvm/prebuilt/darwin-arm64"  # ARM64 工具链路径
      TARGET_ARCH: "aarch64-linux-android21"  # 目标架构

    steps:
      # ----------------------------------------
      # 1. 检出代码
      # ----------------------------------------
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: mipad/Test-ryu
          ref: "1"
          path: Test-ryu

      # ----------------------------------------
      # 2. 配置 Java 环境
      # ----------------------------------------
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      # ----------------------------------------
      # 3. 安装 Android NDK
      # ----------------------------------------
      - name: Install Android NDK
        run: |
          # 安装指定版本 NDK
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "ndk;${{ env.NDK_VERSION }}"
          
          # 接受所有 Android 许可证
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses

      # ----------------------------------------
      # 4. 配置 NDK 路径
      # ----------------------------------------
      - name: Configure NDK Path
        run: |
          # 写入 NDK 路径到 local.properties
          echo "ndk.dir=${{ env.NDK_DIR }}" >> Test-ryu/src/RyujinxAndroid/local.properties

          # 验证关键路径存在性
          echo "=== NDK 工具链验证 ==="
          echo "Clang 路径: ${{ env.NDK_TOOLCHAIN }}/bin/clang"
          ls -l "${{ env.NDK_TOOLCHAIN }}/bin/clang"
          
          echo "=== Sysroot 库验证 ==="
          echo "Liblog 路径: ${{ env.NDK_TOOLCHAIN }}/sysroot/usr/lib/${{ env.TARGET_ARCH }}/liblog.so"
          ls -l "${{ env.NDK_TOOLCHAIN }}/sysroot/usr/lib/${{ env.TARGET_ARCH }}/liblog.so"

      # ----------------------------------------
      # 5. 配置构建环境变量
      # ----------------------------------------
      - name: Setup Build Environment
        run: |
          # 将 NDK 工具链添加到 PATH
          echo "${{ env.NDK_TOOLCHAIN }}/bin" >> $GITHUB_PATH
          
          # 设置编译器标志
          echo "CC=${{ env.NDK_TOOLCHAIN }}/bin/clang" >> $GITHUB_ENV
          echo "CXX=${{ env.NDK_TOOLCHAIN }}/bin/clang++" >> $GITHUB_ENV
          echo "LDFLAGS=-L${{ env.NDK_TOOLCHAIN }}/sysroot/usr/lib/${{ env.TARGET_ARCH }}" >> $GITHUB_ENV

      # ----------------------------------------
      # 6. 构建项目
      # ----------------------------------------
      - name: Build Project
        run: |
          cd Test-ryu/src/RyujinxAndroid
          
          # 清理并构建
          ./gradlew clean assembleRelease \
              -Pandroid.ndkPath="${{ env.NDK_DIR }}" \
              -Pandroid.extraLdFlags="-Wl,--sysroot=${{ env.NDK_TOOLCHAIN }}/sysroot" \
              --stacktrace --info

          # 验证 .so 文件生成
          echo "=== 生成的 .so 文件 ==="
          find . -name "*.so"

      # ----------------------------------------
      # 7. 上传 APK 产物
      # ----------------------------------------
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: ryujinx-arm64-build-${{ github.run_number }}
          path: |
            Test-ryu/src/RyujinxAndroid/app/build/outputs/apk/release/*.apk
            Test-ryu/src/RyujinxAndroid/**/*.so  # 同时上传 .so 文件
          retention-days: 7
