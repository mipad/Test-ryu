// Copyright 2016 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file is generated.
#ifndef VULKAN_WRAPPER_H
#define VULKAN_WRAPPER_H

#define VK_NO_PROTOTYPES 1
#include <vulkan/vulkan.h>

// 添加这个定义来确保不会与官方头文件冲突
#ifndef VULKAN_WRAPPER_IMPLEMENTATION
#define VK_DEFINE_EXTERN
#else
#define VK_DEFINE_EXTERN extern
#endif

/* Initialize the Vulkan function pointer variables declared in this header.
 * Returns 0 if vulkan is not available, non-zero if it is available.
 */
int InitVulkan(void);

// 只声明需要动态加载的扩展函数，不声明核心函数

// VK_KHR_surface
VK_DEFINE_EXTERN PFN_vkDestroySurfaceKHR vkDestroySurfaceKHR;
VK_DEFINE_EXTERN PFN_vkGetPhysicalDeviceSurfaceSupportKHR vkGetPhysicalDeviceSurfaceSupportKHR;
VK_DEFINE_EXTERN PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR vkGetPhysicalDeviceSurfaceCapabilitiesKHR;
VK_DEFINE_EXTERN PFN_vkGetPhysicalDeviceSurfaceFormatsKHR vkGetPhysicalDeviceSurfaceFormatsKHR;
VK_DEFINE_EXTERN PFN_vkGetPhysicalDeviceSurfacePresentModesKHR vkGetPhysicalDeviceSurfacePresentModesKHR;

// VK_KHR_swapchain
VK_DEFINE_EXTERN PFN_vkCreateSwapchainKHR vkCreateSwapchainKHR;
VK_DEFINE_EXTERN PFN_vkDestroySwapchainKHR vkDestroySwapchainKHR;
VK_DEFINE_EXTERN PFN_vkGetSwapchainImagesKHR vkGetSwapchainImagesKHR;
VK_DEFINE_EXTERN PFN_vkAcquireNextImageKHR vkAcquireNextImageKHR;
VK_DEFINE_EXTERN PFN_vkQueuePresentKHR vkQueuePresentKHR;

// VK_KHR_display
VK_DEFINE_EXTERN PFN_vkGetPhysicalDeviceDisplayPropertiesKHR vkGetPhysicalDeviceDisplayPropertiesKHR;
VK_DEFINE_EXTERN PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR vkGetPhysicalDeviceDisplayPlanePropertiesKHR;
VK_DEFINE_EXTERN PFN_vkGetDisplayPlaneSupportedDisplaysKHR vkGetDisplayPlaneSupportedDisplaysKHR;
VK_DEFINE_EXTERN PFN_vkGetDisplayModePropertiesKHR vkGetDisplayModePropertiesKHR;
VK_DEFINE_EXTERN PFN_vkCreateDisplayModeKHR vkCreateDisplayModeKHR;
VK_DEFINE_EXTERN PFN_vkGetDisplayPlaneCapabilitiesKHR vkGetDisplayPlaneCapabilitiesKHR;
VK_DEFINE_EXTERN PFN_vkCreateDisplayPlaneSurfaceKHR vkCreateDisplayPlaneSurfaceKHR;

// VK_KHR_display_swapchain
VK_DEFINE_EXTERN PFN_vkCreateSharedSwapchainsKHR vkCreateSharedSwapchainsKHR;

#ifdef VK_USE_PLATFORM_XLIB_KHR
// VK_KHR_xlib_surface
VK_DEFINE_EXTERN PFN_vkCreateXlibSurfaceKHR vkCreateXlibSurfaceKHR;
VK_DEFINE_EXTERN PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR vkGetPhysicalDeviceXlibPresentationSupportKHR;
#endif

#ifdef VK_USE_PLATFORM_XCB_KHR
// VK_KHR_xcb_surface
VK_DEFINE_EXTERN PFN_vkCreateXcbSurfaceKHR vkCreateXcbSurfaceKHR;
VK_DEFINE_EXTERN PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR vkGetPhysicalDeviceXcbPresentationSupportKHR;
#endif

#ifdef VK_USE_PLATFORM_WAYLAND_KHR
// VK_KHR_wayland_surface
VK_DEFINE_EXTERN PFN_vkCreateWaylandSurfaceKHR vkCreateWaylandSurfaceKHR;
VK_DEFINE_EXTERN PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR vkGetPhysicalDeviceWaylandPresentationSupportKHR;
#endif

#ifdef VK_USE_PLATFORM_MIR_KHR
// VK_KHR_mir_surface
VK_DEFINE_EXTERN PFN_vkCreateMirSurfaceKHR vkCreateMirSurfaceKHR;
VK_DEFINE_EXTERN PFN_vkGetPhysicalDeviceMirPresentationSupportKHR vkGetPhysicalDeviceMirPresentationSupportKHR;
#endif

#ifdef VK_USE_PLATFORM_ANDROID_KHR
// VK_KHR_android_surface
VK_DEFINE_EXTERN PFN_vkCreateAndroidSurfaceKHR vkCreateAndroidSurfaceKHR;
#endif

#ifdef VK_USE_PLATFORM_WIN32_KHR
// VK_KHR_win32_surface
VK_DEFINE_EXTERN PFN_vkCreateWin32SurfaceKHR vkCreateWin32SurfaceKHR;
VK_DEFINE_EXTERN PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR vkGetPhysicalDeviceWin32PresentationSupportKHR;
#endif

#ifdef USE_DEBUG_EXTENTIONS
#include <vulkan/vk_sdk_platform.h>
// VK_EXT_debug_report
VK_DEFINE_EXTERN PFN_vkCreateDebugReportCallbackEXT vkCreateDebugReportCallbackEXT;
VK_DEFINE_EXTERN PFN_vkDestroyDebugReportCallbackEXT vkDestroyDebugReportCallbackEXT;
VK_DEFINE_EXTERN PFN_vkDebugReportMessageEXT vkDebugReportMessageEXT;
#endif

// === 新增扩展 ===

// VK_KHR_timeline_semaphore
VK_DEFINE_EXTERN PFN_vkGetPhysicalDeviceFeatures2 vkGetPhysicalDeviceFeatures2KHR;
VK_DEFINE_EXTERN PFN_vkGetPhysicalDeviceProperties2 vkGetPhysicalDeviceProperties2KHR;
VK_DEFINE_EXTERN PFN_vkGetSemaphoreCounterValueKHR vkGetSemaphoreCounterValueKHR;
VK_DEFINE_EXTERN PFN_vkWaitSemaphoresKHR vkWaitSemaphoresKHR;
VK_DEFINE_EXTERN PFN_vkSignalSemaphoreKHR vkSignalSemaphoreKHR;

// VK_EXT_conditional_rendering
VK_DEFINE_EXTERN PFN_vkCmdBeginConditionalRenderingEXT vkCmdBeginConditionalRenderingEXT;
VK_DEFINE_EXTERN PFN_vkCmdEndConditionalRenderingEXT vkCmdEndConditionalRenderingEXT;

// VK_EXT_extended_dynamic_state
VK_DEFINE_EXTERN PFN_vkCmdSetCullModeEXT vkCmdSetCullModeEXT;
VK_DEFINE_EXTERN PFN_vkCmdSetFrontFaceEXT vkCmdSetFrontFaceEXT;
VK_DEFINE_EXTERN PFN_vkCmdSetPrimitiveTopologyEXT vkCmdSetPrimitiveTopologyEXT;
VK_DEFINE_EXTERN PFN_vkCmdSetViewportWithCountEXT vkCmdSetViewportWithCountEXT;
VK_DEFINE_EXTERN PFN_vkCmdSetScissorWithCountEXT vkCmdSetScissorWithCountEXT;
VK_DEFINE_EXTERN PFN_vkCmdBindVertexBuffers2EXT vkCmdBindVertexBuffers2EXT;
VK_DEFINE_EXTERN PFN_vkCmdSetDepthTestEnableEXT vkCmdSetDepthTestEnableEXT;
VK_DEFINE_EXTERN PFN_vkCmdSetDepthWriteEnableEXT vkCmdSetDepthWriteEnableEXT;
VK_DEFINE_EXTERN PFN_vkCmdSetDepthCompareOpEXT vkCmdSetDepthCompareOpEXT;
VK_DEFINE_EXTERN PFN_vkCmdSetDepthBoundsTestEnableEXT vkCmdSetDepthBoundsTestEnableEXT;
VK_DEFINE_EXTERN PFN_vkCmdSetStencilTestEnableEXT vkCmdSetStencilTestEnableEXT;
VK_DEFINE_EXTERN PFN_vkCmdSetStencilOpEXT vkCmdSetStencilOpEXT;

// KHR_push_descriptor
VK_DEFINE_EXTERN PFN_vkCmdPushDescriptorSetKHR vkCmdPushDescriptorSetKHR;

// EXT_transform_feedback
VK_DEFINE_EXTERN PFN_vkCmdBindTransformFeedbackBuffersEXT vkCmdBindTransformFeedbackBuffersEXT;
VK_DEFINE_EXTERN PFN_vkCmdBeginTransformFeedbackEXT vkCmdBeginTransformFeedbackEXT;
VK_DEFINE_EXTERN PFN_vkCmdEndTransformFeedbackEXT vkCmdEndTransformFeedbackEXT;
VK_DEFINE_EXTERN PFN_vkCmdBeginQueryIndexedEXT vkCmdBeginQueryIndexedEXT;
VK_DEFINE_EXTERN PFN_vkCmdEndQueryIndexedEXT vkCmdEndQueryIndexedEXT;
VK_DEFINE_EXTERN PFN_vkCmdDrawIndirectByteCountEXT vkCmdDrawIndirectByteCountEXT;

// KHR_draw_indirect_count
VK_DEFINE_EXTERN PFN_vkCmdDrawIndirectCountKHR vkCmdDrawIndirectCountKHR;
VK_DEFINE_EXTERN PFN_vkCmdDrawIndexedIndirectCountKHR vkCmdDrawIndexedIndirectCountKHR;

// EXT_external_memory_host
VK_DEFINE_EXTERN PFN_vkGetMemoryHostPointerPropertiesEXT vkGetMemoryHostPointerPropertiesEXT;

// VK_EXT_blend_operation_advanced
VK_DEFINE_EXTERN PFN_vkCmdSetLogicOpEXT vkCmdSetLogicOpEXT;

// VK_EXT_primitive_topology_list_restart
VK_DEFINE_EXTERN PFN_vkCmdSetPrimitiveRestartEnableEXT vkCmdSetPrimitiveRestartEnableEXT;

// VK_EXT_depth_clip_control
VK_DEFINE_EXTERN PFN_vkCmdSetDepthClipNegativeOneToOneEXT vkCmdSetDepthClipNegativeOneToOneEXT;

// VK_EXT_attachment_feedback_loop_layout
VK_DEFINE_EXTERN PFN_vkGetPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT vkGetPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT;

// VK_EXT_attachment_feedback_loop_dynamic_state
VK_DEFINE_EXTERN PFN_vkCmdSetAttachmentFeedbackLoopEnableEXT vkCmdSetAttachmentFeedbackLoopEnableEXT;


VK_DEFINE_EXTERN PFN_vkGetPhysicalDeviceRobustness2PropertiesEXT vkGetPhysicalDeviceRobustness2PropertiesEXT;

 VK_DEFINE_EXTERN PFN_vkGetPhysicalDeviceShaderFloat16Int8FeaturesKHR vkGetPhysicalDeviceShaderFloat16Int8FeaturesKHR;

 VK_DEFINE_EXTERN PFN_vkGetPhysicalDeviceCustomBorderColorPropertiesEXT vkGetPhysicalDeviceCustomBorderColorPropertiesEXT;

 VK_DEFINE_EXTERN PFN_vkGetPhysicalDevicePortabilitySubsetPropertiesKHR vkGetPhysicalDevicePortabilitySubsetPropertiesKHR;

 VK_DEFINE_EXTERN PFN_vkGetPhysicalDeviceFragmentDensityMapPropertiesEXT vkGetPhysicalDeviceFragmentDensityMapPropertiesEXT;

 VK_DEFINE_EXTERN PFN_vkGetPhysicalDeviceFragmentDensityMap2PropertiesEXT vkGetPhysicalDeviceFragmentDensityMap2PropertiesEXT;
#endif // VULKAN_WRAPPER_H
